{"version":3,"sources":["context.js","Todo/TodoItem.js","Todo/TodoList.js","Loader.js","Modal/Modal.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","styles","li","display","justifyContent","alignItems","padding","border","borderRadius","marginBottom","input","marginRight","TodoItem","todo","index","onChange","removeTodo","useContext","classes","completed","push","style","className","join","type","checked","id","title","onClick","bind","ul","listStyle","margin","TodoList","props","todos","map","key","onToggle","Modal","state","isOpen","Fragment","setState","this","Component","AddTodo","lazy","Promise","resolve","setTimeout","App","useState","setTodos","loading","setLoading","useEffect","fetch","then","response","json","Provider","value","filter","Suspense","fallback","onCreate","concat","Date","now","Loader","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4a4a1530.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Context = React.createContext()\r\n\r\nexport default Context","import React, {useContext} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Context from '.././context'\r\n\r\nconst styles = {\r\n    li: {\r\n      display: 'flex',\r\n      justifyContent: 'space-between',\r\n      alignItems: 'center',\r\n      padding: '.5rem 1rem',\r\n      border: '1px solid #ccc',\r\n      borderRadius: '4px',\r\n      marginBottom: '5px'  \r\n    },\r\n    input: {\r\n        marginRight: '1rem'\r\n    }\r\n}\r\n\r\nfunction TodoItem({todo, index, onChange}) {\r\n    const {removeTodo} = useContext(Context)\r\n    const classes = []\r\n\r\n    if (todo.completed) {\r\n        classes.push('done');\r\n    }\r\n    return <li style={ styles.li}>\r\n                <span className={classes.join(' ')}>\r\n                    <input type=\"checkbox\" \r\n                    checked={todo.completed}\r\n                    style={styles.input} \r\n                    onChange={() => onChange(todo.id)}/>\r\n                    <span>\r\n                    {index + 1}\r\n                    &nbsp;\r\n                    {todo.title}\r\n                </span>\r\n                </span>\r\n                <button className='btn' onClick={removeTodo.bind(null, todo.id)}>&times;</button>\r\n                \r\n            </li>\r\n}\r\nTodoItem.propTypes = {\r\n    todos: PropTypes.object.isRequired,\r\n    index: PropTypes.number,\r\n    onChange: PropTypes.func.isRequired\r\n}\r\nexport default TodoItem","import React from 'react'\r\nimport PropTypes from 'prop-types' \r\nimport TodoItem from './TodoItem'\r\n\r\nconst styles = {\r\n    ul: {\r\n        listStyle: 'none',\r\n        margin: 0,\r\n        padding: 0\r\n    }\r\n}\r\n\r\nfunction TodoList(props) {\r\n    return(\r\n        <ul style={styles.ul}>\r\n          { props.todos.map((todo, index) => {\r\n              return(\r\n                <TodoItem \r\n                todo={todo} \r\n                key={todo.id} \r\n                index={index} \r\n                onChange={props.onToggle}>\r\n                    \r\n                </TodoItem>\r\n              )\r\n          })}\r\n        </ul>\r\n    )\r\n}\r\n\r\nTodoList.propTypes = {\r\n    todos: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    onToggle: PropTypes.func.isRequired\r\n}\r\nexport default TodoList","import React from 'react'\r\n\r\n\r\nexport default () => <div style={{display: 'flex', justifyContent: 'center', margin: '.5rem'}}><div className=\"lds-dual-ring\"></div></div>","import React from 'react'\r\nimport './Modal.css'\r\n\r\n\r\nexport default class Modal extends React.Component {\r\n    state = {\r\n        isOpen: false \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <button onClick={() => this.setState({isOpen: true})} className='modal__open'>Open modal</button>\r\n\r\n                {this.state.isOpen && (\r\n                    <div className='modal'>\r\n                            <div className=\"modal__body\">\r\n                            <h1>Modal Title</h1>\r\n                            <p className='modal__text'> I am awesome modal!</p>\r\n                            <button className='modal__close' onClick={() => this.setState({isOpen: false})}>Close modal</button>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}","import React, {useEffect} from 'react'\r\nimport TodoList from './Todo/TodoList'\r\nimport Context from './context'\r\nimport Loader from './Loader'\r\nimport Modal from './Modal/Modal'\r\n\r\nconst AddTodo = React.lazy(()=> new Promise(resolve => {\r\n\tsetTimeout (() => {\r\n\t\tresolve(import('./Todo/AddTodo'))\r\n\t}, 3000)\r\n}))\r\n\r\nfunction App() {\r\n\tconst [todos, setTodos] = React.useState([])\r\n\tconst [loading, setLoading] = React.useState(true)\r\n\tuseEffect( () => {\r\n\t\tfetch('https://jsonplaceholder.typicode.com/todos?_limit=5')\r\n\t\t\t.then(response => response.json())\r\n\t\t\t.then(todos => {\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\tsetTodos(todos)\r\n\t\t\t\t\tsetLoading(false)\r\n\t\t\t\t},2000)\r\n\t\t\t\t\r\n\t\t\t})\r\n\t},[])\r\n\r\n\tfunction onToggle(id){\r\n\t\tsetTodos( \r\n\t\t\ttodos.map(todo => {\r\n\t\t\t\tif(todo.id == id) {\r\n\t\t\t\t\ttodo.completed = !todo.completed\r\n\t\t\t\t}\r\n\t\t\t\treturn todo\r\n\t\t\t})\r\n\t\t)\r\n\t}\r\n\r\n\tfunction removeTodo(id) {\r\n\t\tsetTodos(todos.filter(todo => todo.id !== id))\t\r\n\t}\r\n\r\n\tfunction addTodo(title) {\r\n\t\tsetTodos(todos.concat([{\r\n\t\t\ttitle, \r\n\t\t\tid: Date.now(),\r\n\t\t\tcompleted: false\r\n\t\t}]))\r\n\t}\r\n\treturn (\r\n\t\t<Context.Provider value={{removeTodo}}>\r\n\t\t\t<div className=\"wrapper\">\r\n\t\t\t\t<h1>React Tutorial (Todo List)</h1>\r\n\t\t\t\t<Modal>\r\n\r\n\t\t\t\t</Modal>\r\n\t\t\t\t<React.Suspense fallback={<p>Loading...</p>}>\r\n\t\t\t\t\t<AddTodo onCreate={addTodo}>\r\n\r\n\t\t\t\t\t</AddTodo>\r\n\t\t\t\t</React.Suspense>\r\n\r\n\t\t\t\t{loading && <Loader></Loader>}\r\n\t\t\t\t{todos.length ? (\r\n\t\t\t\t<TodoList todos={todos} onToggle={onToggle}/>\r\n\t\t\t\t) : (\r\n\t\t\t\t\tloading ? null : (\r\n\t\t\t\t\t\t<p>No todos!</p>\r\n\t\t\t\t\t) \r\n\t\t\t\t\t\r\n\t\t\t\t)}\r\n\t\t\t\t\r\n\t\t\t</div>\r\n\t\t</Context.Provider>\r\n\r\n\t)\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}